import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java-library'
    id "com.github.spotbugs" version "4.7.0"
    id 'checkstyle'
    id 'maven'
    id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    useJUnitPlatform()
}
group = 'io.github.thecodinglog'
version = '0.1.1'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    api('org.springframework:spring-core:4.3.30.RELEASE')
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation('org.assertj:assertj-core:3.18.1')
    testImplementation('org.mockito:mockito-all:1.10.19')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkStyle.xml")
    configProperties = ["suppressionFile": "${project.rootDir}/config/checkstyle/checkStyle-suppressions.xml"]
    toolVersion = "8.40"
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

spotbugs {
    ignoreFailures = false
    reportLevel = "high"
    spotbugsTest.enabled = false
}
tasks.withType(SpotBugsTask) {
    reports {
        text.enabled = true
        xml.enabled = false
        html.enabled = false
    }
}

tasks.register("printSpotbugsMain") {
    doLast {
        File mainResult = file("${buildDir}/reports/spotbugs/main.txt")
        if (mainResult.exists()) {
            mainResult.readLines().forEach {
                println(it)
            }
        }
    }
}

tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name "Method-Invoker"
                packaging 'jar'
                // optionally artifactId can be defined here
                description "Method-Invoker is a tool for invoking methods at runtime using class names and method modifiers."
                url "https://github.com/thecodinglog/method-invoker"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/thecodinglog/method-invoker/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "thecodinglog"
                        name = "Jeongjin Kim"
                        email = "thefuturecreator@gmail.com"
                    }
                }
                scm {
                    connection = "https://github.com/thecodinglog/method-invoker.git"
                    developerConnection = "https://github.com/thecodinglog/method-invoker.git"
                    url = "https://github.com/thecodinglog/method-invoker"
                }
            }
        }
    }
}

signing{
    sign configurations.archives
}